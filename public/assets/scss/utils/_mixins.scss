/*font*/

@mixin font($sizeValue, $line, $color, $weight, $textTransform, $fontFamily) {

  @if $textTransform != 0 and $weight != 0 and $color != 0 {
    font: $weight ($sizeValue / 16) + rem/$line $fontFamily;
    color: $color;
    text-transform: $textTransform;
  }
  @else if $textTransform == 0 and $weight != 0 and $color == 0 {
    font: $weight ($sizeValue / 16) + rem/$line $fontFamily;
  }
  @else if $textTransform != 0 and $weight == 0 and $color == 0 {
    font: ($sizeValue / 16) + rem/$line $fontFamily;
    text-transform: $textTransform;
  }
  @else if $textTransform == 0 and $weight == 0 and $color != 0 {
    font: ($sizeValue / 16) + rem/$line $fontFamily;
    color: $color;
  }
  @else if $textTransform != 0 and $weight != 0 and $color == 0 {
    font: $weight ($sizeValue / 16) + rem/$line $fontFamily;
    text-transform: $textTransform;
  }
  @else if $textTransform != 0 and $weight == 0 and $color != 0 {
    font: ($sizeValue / 16) + rem/$line $fontFamily;
    color: $color;
    text-transform: $textTransform;
  }
  @else if $textTransform == 0 and $weight != 0 and $color != 0 {
    font: $weight ($sizeValue / 16) + rem/$line $fontFamily;
    color: $color;
  }
  @else {
    font: ($sizeValue / 16) + rem/$line $fontFamily;
  }
}

@mixin fluid-font($min-vw, $max-vw, $min-font-size, $max-font-size) {

  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

//Transition
@mixin transition($prop,$delay,$timing){
  -webkit-transition: $prop $delay $timing;
  -moz-transition: $prop $delay $timing;
  transition: $prop $delay $timing;
}

//Transformations
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
  -moz-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}